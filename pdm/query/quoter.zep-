
/**
 * This file is part of Aura for PHP.
 *
 * @package \Pdm\Query
 * @license http://opensource.org/licenses/bsd-license.php BSD
 */
namespace Pdm\Query;

/**
 * A quoting mechanism for identifier names (not values).
 *
 * @package \Pdm\Query
 */
class Quoter
{
    /**
     * The prefix to use when quoting identifier names.
     *
     * @var string
     */
    protected quoteNamePrefix = "\"";

    /**
     *
     * The suffix to use when quoting identifier names.
     *
     * @var string
     *
     */
    protected quoteNameSuffix = "\"";

    /**
     * Constructor.
     *
     * @param string prefix The prefix to use when quoting identifier names.
     * @param string suffix The suffix to use when quoting identifier names.
     */
    public function __construct(string! prefix, string! suffix)
    {
        let this->quoteNamePrefix = prefix;
        let this->quoteNameSuffix = suffix;
    }

    /**
     * Returns the prefix to use when quoting identifier names.
     *
     * @return string
     */
    public function getQuoteNamePrefix() -> string
    {
        return this->quoteNamePrefix;
    }

    /**
     * Returns the suffix to use when quoting identifier names.
     *
     * @return string
     */
    public function getQuoteNameSuffix() -> string
    {
        return this->quoteNameSuffix;
    }

    /**
     * Quotes a single identifier name (table, table alias, table column,
     * index, sequence).
     *
     * If the name contains `' AS '`, this method will separately quote the
     * parts before and after the `' AS '`.
     *
     * If the name contains a space, this method will separately quote the
     * parts before and after the space.
     *
     * If the name contains a dot, this method will separately quote the
     * parts before and after the dot.
     *
     * @param string $spec The identifier name to quote.
     * @return string|array The quoted identifier name.
     * @see replaceName()
     * @see quoteNameWithSeparator()
     */
    public function quoteName(string! spec) -> string | array
    {
        var sep, seps, pos;

        let spec = trim(spec);
        let seps = [" AS ", " ", "."];

        for sep in seps {
            let pos = strripos(spec, sep);
            if pos {
                return this->quoteNameWithSeparator(spec, sep, pos);
            }
        }

        return this->replaceName(spec);
    }

    /**
     * Quotes an identifier that has a separator.
     *
     * @param string $spec The identifier name to quote.
     * @param string $sep The separator, typically a dot or space.
     * @param int $pos The position of the separator.
     * @return string The quoted identifier name.
     */
    protected function quoteNameWithSeparator(string! spec, string! sep, int pos) -> string
    {
        var len, part1, part2;

        let len = strlen(sep);
        let part1 = this->quoteName(substr(spec, 0, pos));
        let part2 = this->replaceName(substr(spec, pos + len));

        return part1 . sep . part2;
    }

    /**
     * Quotes all fully-qualified identifier names ("table.col") in a string,
     * typically an SQL snippet for a SELECT clause.
     *
     * Does not quote identifier names that are string literals (i.e., inside
     * single or double quotes).
     *
     * Looks for a trailing ' AS alias' and quotes the alias as well.
     *
     * @param string $text The string in which to quote fully-qualified
     * identifier names to quote.
     * @return string|array The string with names quoted in it.
     */
    public function quoteNamesIn(string! text) -> string | array
    {
/*
        var list, last, key, val, isThird, isLast;

        let list = this->getListForQuoteNamesIn(text);
        let last = count(list) - 1;
        let text = null;

        for key, val in list {
            // skip elements 2, 5, 8, 11, etc. as artifacts of the back-
            // referenced split; these are the trailing/ending quote
            // portions, and already included in the previous element.
            // this is the same as skipping every third element from zero.
            let isThird = key + 1 % 3;

            if isThird {
                if key == last {
                    let isLast = true;
                } else {
                    let isLast = false;
                }
                let text .= this->quoteNamesInLoop(val, isLast);
            }
        }
*/
        return text;
    }

    /**
     * Returns a list of candidate elements for quoting.
     *
     * @param string $text The text to split into quoting candidates.
     * @return array
     */
    protected function getListForQuoteNamesIn(string! text) -> array
    {
        var apos, quot;

        // look for ', ", \', or \" in the string.
        // match closing quotes against the same number of opening quotes.
        let apos = "'";
        let quot = "\"";

        return preg_split(
            "/((" . apos . "+|" . quot . "+|\\" . apos . "+|\\" . quot . "+).*?\\2)/",
            text,
            -1,
            PREG_SPLIT_DELIM_CAPTURE
        );
    }

    /**
     * The in-loop functionality for quoting identifier names.
     *
     * @param string $val The name to be quoted.
     * @param bool $isLast Is this the last loop?
     * @return string The quoted name.
     */
    protected function quoteNamesInLoop(string! val, boolean! isLast) -> string
    {
        if isLast {
            return this->replaceNamesAndAliasIn(val);
        }
        return this->replaceNamesIn(val);
    }

    /**
     * Replaces the names and alias in a string.
     *
     * @param string $val The name to be quoted.
     * @return string The quoted name.
     */
    protected function replaceNamesAndAliasIn(string! val) -> string
    {
        var quoted, pos, alias;

        let quoted = this->replaceNamesIn(val);
        let pos = strripos(quoted, " AS ");

        if pos {
            let alias = this->replaceName(substr(quoted, pos + 4));
            let quoted = substr(quoted, 0, pos) . " AS " . alias;
        }

        return quoted;
    }

    /**
     * Quotes an identifier name (table, index, etc); ignores empty values and
     * values of '*'.
     *
     * @param string $name The identifier name to quote.
     * @return string The quoted identifier name.
     */
    protected function replaceName(string! name) -> string
    {
        let name = trim(name);

        if name == "*" {
            return name;
        }

        return this->quoteNamePrefix . name . this->quoteNameSuffix;
    }

    /**
     * Quotes all fully-qualified identifier names ("table.col") in a string.
     *
     * @param string $text The string in which to quote fully-qualified
     * identifier names to quote.
     * @return string|array The string with names quoted in it.
     * @see quoteNamesIn()
     */
    protected function replaceNamesIn(string! text) -> string | array
    {
        var isStringLiteral, word, find, repl;

        let isStringLiteral = strpos(text, "'") !== false || strpos(text, "\"") !== false;

        if isStringLiteral {
            return text;
        }

        let word = "[a-z_][a-z0-9_]+";
        let find = "/(\\b)(" . word . ")\\.(" . word . ")(\\b)/i";

        let repl = "$1"
              . this->quoteNamePrefix
              . "$2"
              . this->quoteNameSuffix
              . "."
              . this->quoteNamePrefix
              . "$3"
              . this->quoteNameSuffix
              . "$4"
              ;

        let text = preg_replace(find, repl, text);

        return text;
    }
}
